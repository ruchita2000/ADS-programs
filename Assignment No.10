/*
 * as10.cpp
 *
 *  Created on: 19-Apr-2019
 *      Author: ruchita
 *      Title=To create ADT that implements the SET concept.
a)Add (new Element) -Place a value into the set
b)Remove (element) Remove the value
c) Contains (element) Return true if element is in collection
d)Size () Return number of values in collection ,Iterator () Return an iterator used to loop over collection
e)Intersection  of two sets,
f)Union of two sets,
g) Difference between two sets, h) Subset
 */

#include<iostream>
using namespace std;
class node
{
	int data;
	node *next;
public:
	node()
   {
	data=0;
	next=NULL;
   }
	friend class set;
};



class set
{
	node *head;
public:
	set()
    {
	  head=NULL;
    }
	void add(int x)
	{
		node *n=new node();
		n->data=x;
		if(head==NULL)
		{
			head=n;
		}
		else
		{
			node *temp;
			temp=head;
			while(temp->next!=NULL)
			{
				temp=temp->next;
			}
			temp->next=n;
		}

	}
	bool contains(int x)
	{
		node *temp=head;
		int flag=0;
		while(temp!=NULL)
		{
			if(temp->data==x)
			{
				flag=1;
				break;
			}
			temp=temp->next;
		}
		if(flag==1)
		{
			return true;
		}
		return false;

	}
	int size()
	{
		int count=0;
		node *temp;
		temp=head;
		while(temp!=NULL)
		{
			count++;
			temp=temp->next;
		}
      return count;
	}

	void remove(int x)
	{
		if(head==NULL)
		{
			cout<<"Set is already empty!!";
		}
		if(head->data==x)
		{
			node *temp=head;
			head=temp->next;
			temp->next=NULL;
			delete temp;
		}
		else
		{
			int flag=0;
			node *temp;
			node *temp1;
			temp=head;
			temp1=head->next;
			while(temp1!=NULL)
			{
				if(temp1->data==x)
				{
					flag=1;
					break;
				}
				temp=temp1;
				temp1=temp1->next;
			}
			if(flag==1)
			{
				temp->next=temp1->next;
				temp1->next=NULL;
				delete temp1;
			}
			else
			{
				cout<<"\n element not present in set!!";
			}
		}
	}

	void display()
	{
		node *temp=head;
		cout<<"{";
		while(temp!=NULL)
		{
			cout<<temp->data;
			cout<<",";
			temp=temp->next;
		}
		cout<<"}";
	}

	set unionset(set s2)
	{
		set s3;
		node *temp1=head;
		node *temp2;
		if(head==NULL && s2.head==NULL)
		{
			cout<<"\n both sets are empty!!";
		}
		else
		{
			while(temp1!=NULL)
			{
				if(s3.contains(temp1->data)!=true) //check whether element is already present or not..
				{
				s3.add(temp1->data);
				}
				temp2=s2.head;
				while(temp2!=NULL)   //first check with all elements in set2 similarly for entire element..
				{
	           	if(temp1->data==temp2->data)
				{
					temp2=temp2->next;   //as similar element already inserted..
				}
				else
				{
					if(s3.contains(temp2->data)==true)
					{

					}
					else
					{
						s3.add(temp2->data);
					}
					temp2=temp2->next;
				}


				}
				temp1=temp1->next;
			}

		}
		return s3;

    }
	set interset(set s2)
	{   set s3;
		node *temp1=head;
		node *temp2;
		if(head==NULL && s2.head==NULL)
		{
			cout<<"\n both sets are empty!!";
		}
		else
		{
			while(temp1!=NULL)
			{
				temp2=s2.head;
				while(temp2!=NULL)
				{
					if(temp1->data==temp2->data)
					{

						//if(s3.contains(temp2->data)!=true)
							s3.add(temp2->data);
					}
					temp2=temp2->next;
				}
				temp1=temp1->next;
			}
		}
		return s3;
	}
	set differ(set s2)
	{
		set s3;
		node *temp1;
		node *temp2;
		temp1=head;
		if(head==NULL && s2.head==NULL)
		{
			cout<<"\n both Sets are empty!!";
		}
		else
		{
			int flag;
		  while(temp1!=NULL)
		 {
			flag=0;
			temp2=s2.head;
			while(temp2!=NULL)
			{
				if(temp1->data==temp2->data)
				{
					flag=1;
					break;
				}
				temp2=temp2->next;
			}
			if(flag==0)
			{
			   s3.add(temp1->data);
			}
			temp1=temp1->next;
		 }

	    }
		return s3;
	}
void subset(set s2)
{
   int count=0;
   int s=s2.size();
   node *temp1;
   node *temp2=s2.head;
   if(s2.head==NULL)
   {
	   cout<<"{}-is subset of SET-1";
   }
   else
   {
	   while(temp2!=NULL)
	   {
		   temp1=head;
		   while(temp1!=NULL)
		   {
			   if(temp2->data==temp1->data)
			   {
				   count++;
			   }
			   temp1=temp1->next;
		   }
		   temp2=temp2->next;
	   }
	   if(count==s)
	   {
		   if(size()==s2.size())
		   {
			   cout<<"Given SET-2 is Proper Set of SET-1";
		   }
		   else
		   {
			   cout<<"Given SET-2 is Subset of SET-1";
		   }
	   }
	   else
	   {
		   cout<<"\n...NOT SUBSET...";
	   }
   }

  }
};
int main()
{
	set s1,s2,s3;
	cout<<"SET PRESENT::S1 and S2";
	int ch;
	char op='y';
	int x;
	int option;

	while(op=='y')
	{
		cout<<"\n....MENU...";
		cout<<"\n1)add\n2)find\n3)size\n4)remove\n5)display\n6)Union of sets\n7)Intersection of sets\n8)set Difference\n9)Subset";
		cout<<"\n Enter choice=";
		cin>>ch;
		switch(ch)
		{
		case 1: cout<<"\n select set for which value to be insert[s1 or s2]=";
		        cin>>option;
		        cout<<"\n Enter element=";
		        cin>>x;
		        if(option==1)
		        {
		        	s1.add(x);
		        	cout<<"\n element successfully inserted in SET-1 ";
		        }
		        else
		        {
		        	s2.add(x);
		        	cout<<"\n element succefully inserted in SET-2";
		        }

			    break;
		case 2:
			               cout<<"\n select set from which value to be find[s1 or s2]=";
					        cin>>option;
					        cout<<"\n Enter element=";
					        cin>>x;
					        if(option==1)
					        {
					        	if(s1.contains(x)==true)
					        	{
					        	  cout<<"\n element is present in SET-1";
					        	}
					        	else
					        	{
					        		cout<<"\n element is not present in SET-1";
					        	}
					        }
					        else
					        {
					        	if(s2.contains(x)==true)
					        	{
					        		cout<<"\n element is present in SET-1";

					        	}
					        	else
					        	{
					        		cout<<"\n element is not present in SET-2";
					        	}

					        }

						    break;

		 case 3:        cout<<"\n select set from which value to be find[s1 or s2]=";
						cin>>option;
						if(option==1)
						{
						  x=s1.size();
						  cout<<"\n size of SET-1::"<<x;
						}
						else
						{
						 x=s2.size();
	                     cout<<"\n Size of SET-2::"<<x;
						}
						break;
		 case 4:
			        cout<<"\n select set from which value to be find[s1 or s2]=";
			 	    cin>>option;
			 	    cout<<"\n Enter element to be delete";
			 	    cin>>x;
			 	    if(option==1)
			 	    {
			 	    	s1.remove(x);
			 	    	cout<<"\n Element is removed from SET-1";
			 	    }
			 	    else
			 	    {
			 	    	s2.remove(x);
			 	    	cout<<"\n Element is removed from SET-2";
			 	    }
			 	    break;

		case 5:     cout<<"\n select set from which value to be find[s1 or s2]=";
					cin>>option;

					if(option==1)
					{
						cout<<"\n SET1=";
						s1.display();
					}
					else
					{
						cout<<"\nSET2::";
						s2.display();
					}
					break;

		case 6:
			      s3=s1.unionset(s2);
			      cout<<"\n union of SET-1 & SET-2::";
			      s3.display();
			      break;
		case 7:
			    s3=s1.interset(s2);
			    cout<<"\n Intersection of SET1 & SET-2::";
			    s3.display();
			    break;
		case 8:
			     cout<<"Select either(set1-set2)or(set2-set1)[1/2]=";
			     cin>>option;
			     if(option==1)
			     {
			    	 s3=s1.differ(s2);

			     }
			     else
			     {
			    	 s3=s2.differ(s1);

			     }
			     s3.display();
			     break;
		case 9:
                s1.subset(s2);

			    break;


		default: cout<<"\n Invalid choice!!";
		          break;

		}
	}
	return 0;
}
