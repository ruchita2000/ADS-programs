#include <iostream>

using namespace std;
class node
{
    string key;
    string mean;
    node *lchild;
    node *rchild;
    friend class bst;
};
class queue
{
    node *q[20];
    int f,r;
public:
    queue()
    {
        f=-1;
        r=-1;
    }
    void add(node *t)
    {
        r++;
        q[r]=t;
    }
    node *del()
    {
        f++;
        return q[f];
    }
    int isempty()
    {
        if(r==-1 || f>=r)
        {
            return 1;
        }
        else
        {
            return 0;
        }

    }
    friend class bst;

};
class bst
{
    node *root;
    public:
    bst()
    {
        root=NULL;
    }
    node *node1()
    {
        node *n=new node();
        cout<<"\n Enter word=";
        cin>>n->key;
        cout<<"\n Enter meaning=";
        cin>>n->mean;
        n->lchild=NULL;
        n->rchild=NULL;
        return n;
    }
    void insert()
    {
        insert(root);
    }
    void insert(node *r)
    {
        if(root==NULL)
        {
            root=node1();
        }
        else
        {
            node *parent;
            node *p=node1();
            while(r!=NULL)
            {
                parent=r;
                if(p->key.compare(r->key)==0)
                {
                  cout<<"\n can't be inserted because key already present!!!";
                  return;
                }
                else if(p->key.compare(r->key)<0)
                {
                    r=r->lchild;
                }
                else if(p->key.compare(r->key)>0)
                {
                    r=r->rchild;
                }
            }
            if(parent->key.compare(p->key)<0)
            {
                parent->rchild=p;
            }
            else
            {
                parent->lchild=p;
            }
        }
    }
   void asc_order()
    {
       asc_order(root);
    }
  void asc_order(node *t)
  {
      if(t==NULL)
      {
          return;
      }
      else
      {
          asc_order(t->lchild);
          cout<<"\n word="<<t->key;
          cout<<"--[mean="<<t->mean<<"]";
          asc_order(t->rchild);
      }
  }
  void des_order()
  {
      des_order(root);
  }
  void des_order(node *t)
  {
      if(t==NULL)
      {
          return;
      }
      else
      {
          des_order(t->rchild);
          cout<<"\n word="<<t->key;
          cout<<"--[mean="<<t->mean<<"]";
          asc_order(t->lchild);
      }
  }
  void find()
  {
      string w;
      cout<<"\n enter word=";
      cin>>w;
      find(root,w);
  }
  void find(node *t,string w)
  {
      int flag=0;
      int count=0;
      while(t!=NULL)
      {
          count++;
          if(w.compare(t->key)==0)
          {
              flag=1;
              cout<<"\n WORD FOUND";
              cout<<"\nWORD::"<<t->key;
              cout<<"..[mean::"<<t->mean<<"]";
              break;
          }
          else if(w.compare(t->key)>0)
          {
              t=t->rchild;
          }
          else if(w.compare(t->key)<0)
          {
              t=t->lchild;
          }
      }
      if(flag==0)
      {
          cout<<"\n Word not found!!";
      }
      else
      {
          cout<<"\nTotal no.of comparission="<<count;
      }
  }
  void update()
  {
      string w;
      cout<<"\n enter word=";
      cin>>w;
      update(root,w);
  }
  void update(node *t,string w)
  {
      int flag=0;
      while(t!=NULL)
      {
          if(w.compare(t->key)==0)
          {
              flag=1;
              cout<<"UPDATE WORD";
              cout<<"\nEnter new Meaning=";
              cin>>t->mean;
              cout<<"\nUpdated...";
              break;
          }
          else if(w.compare(t->key)>0)
          {
              t=t->rchild;
          }
          else if(w.compare(t->key)<0)
          {
              t=t->lchild;
          }
      }
      if(flag==0)
      {
          cout<<"\n Word not found";
      }
  }
  node *make(node *t)
  {
      node *nod=new node();
      nod->key=t->key;
      nod->mean=t->mean;
      nod->lchild=NULL;
      nod->rchild=NULL;
      return nod;
  }
  void operator =(bst &b)
  {
      queue q1,q2;
      root=make(b.root);
      q1.add(b.root);
      q2.add(root);
      while(q1.isempty()==0)
      {
          node *n1=q1.del();
          node *n2=q2.del();
          if(n1->lchild!=NULL)
          {
              n2->lchild=make(n1->lchild);
              q1.add(n1->lchild);
              q2.add(n2->lchild);
          }
          if(n1->rchild!=NULL)
          {
              n2->rchild=make(n1->rchild);
              q1.add(n1->rchild);
              q2.add(n2->rchild);
          }
      }
  }
  void delete1()
  {
      string w;
      cout<<"\n enter word to be delete=";
      cin>>w;
      delete1(root,w);
  }
  node *delete1(node *t,string w)
  {
      node *temp;
      if(t==NULL)
      {
          cout<<"\n dictonary empty!!";
          return(NULL);
      }
      if(w.compare(t->key)<0)
      {
          t->lchild=delete1(t->lchild,w);
          return(t);
      }
      if(w.compare(t->key)>0)
      {
          t->rchild=delete1(t->rchild,w);
          return(t);
      }
      if(t->lchild==NULL && t->rchild==NULL)
      {
          temp=t;
          delete temp;
          return (NULL);
      }
      if(t->lchild==NULL)
      {
          temp=t;
          t=t->rchild;
          delete temp;
          return(t);
      }
      if(t->rchild==NULL)
      {
          temp=t;
          t=t->lchild;
          delete temp;
          return(t);
      }
      temp=t->rchild;
      while(temp->lchild!=NULL)
      {
          temp=temp->lchild;
      }
      t->key=temp->key;
      t->mean=temp->mean;
      t->rchild=delete1(t->rchild,temp->key);
      return(t);
  }
};
int main()
{
    bst t,t1;
    int flag=0;
    int op;
    while(flag!=1)
    {
        cout<<"\n1)Insert\n2)ascending_order\n3)descending_order\n4)find\n5)update\n6)copy\n7)delete\n8)exit";
        cout<<"\n Enter choice=";
        cin>>op;
    switch(op)
    {
    case 1:
            t.insert();
            break;
    case 2:
           t.asc_order();
           break;
    case 3:
           t.des_order();
           break;
    case 4:
            t.find();
            break;
    case 5:
            t.update();
            break;
    case 6:
            t1=t;
            cout<<"\n...copied dictionary...";
            t1.asc_order();
            break;
    case 7:
            t.delete1();
            break;
    case 8:
           flag=1;
           break;
    default:
           cout<<"\n Invalid choice!!";
           break;
    }
    }
    return 0;
}
